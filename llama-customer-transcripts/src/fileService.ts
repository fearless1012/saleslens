import * as fs from 'fs';
import * as path from 'path';

export class FileService {
  static async ensureDirectoryExists(dirPath: string): Promise<void> {
    try {
      await fs.promises.mkdir(dirPath, { recursive: true });
    } catch (error) {
      console.error(`Error creating directory ${dirPath}:`, error);
      throw error;
    }
  }

  static async saveKnowledgeGraph(knowledgeGraph: any, outputPath: string): Promise<void> {
    try {
      const dir = path.dirname(outputPath);
      await this.ensureDirectoryExists(dir);
      
      const jsonString = JSON.stringify(knowledgeGraph, null, 2);
      await fs.promises.writeFile(outputPath, jsonString, 'utf8');
      
      console.log(`Knowledge graph saved to: ${outputPath}`);
      console.log(`File size: ${(jsonString.length / 1024).toFixed(2)} KB`);
    } catch (error) {
      console.error('Error saving knowledge graph:', error);
      throw error;
    }
  }
  static async saveKnowledgeGraphWithTimestamp(knowledgeGraph: any, baseDir: string = 'output'): Promise<string> {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const product = knowledgeGraph.product || knowledgeGraph.metadata?.product || 'unknown_product';
    const sanitizedProduct = product.replace(/[^a-zA-Z0-9]/g, '_');
    const filename = `knowledge_graph_${sanitizedProduct}_${timestamp}.json`;
    const outputPath = path.join(baseDir, filename);
    
    await this.saveKnowledgeGraph(knowledgeGraph, outputPath);
    return outputPath;
  }

  static async loadTranscriptFile(filePath: string): Promise<string> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      return content;
    } catch (error) {
      console.error(`Error loading transcript file ${filePath}:`, error);
      throw error;
    }
  }
  static generateSummaryReport(knowledgeGraph: any): string {
    // Handle flexible knowledge graph structures
    const metadata = knowledgeGraph.metadata || {};
    const nodes = knowledgeGraph.nodes || [];
    const edges = knowledgeGraph.edges || [];
    const insights = knowledgeGraph.insights || {};
    
    const product = metadata.product || knowledgeGraph.product || 'Unknown Product';
    const totalTranscripts = metadata.totalTranscripts || 'Unknown';
    const successfulCount = metadata.successfulCount || 'Unknown';
    const unsuccessfulCount = metadata.unsuccessfulCount || 'Unknown';
    const generatedAt = metadata.generatedAt || new Date().toISOString();
    
    return `
# Knowledge Graph Analysis Report

## Product: ${product}
- **Generated**: ${new Date(generatedAt).toLocaleString()}
- **Total Transcripts**: ${totalTranscripts}
- **Successful**: ${successfulCount}${totalTranscripts !== 'Unknown' && successfulCount !== 'Unknown' ? ` (${((successfulCount / totalTranscripts) * 100).toFixed(1)}%)` : ''}
- **Unsuccessful**: ${unsuccessfulCount}${totalTranscripts !== 'Unknown' && unsuccessfulCount !== 'Unknown' ? ` (${((unsuccessfulCount / totalTranscripts) * 100).toFixed(1)}%)` : ''}

## Graph Structure
- **Nodes**: ${nodes.length}
- **Edges**: ${edges.length}
${nodes.length > 0 ? `- **Node Types**: ${[...new Set(nodes.map((n: any) => n.type || 'unknown'))].join(', ')}` : ''}
${edges.length > 0 ? `- **Edge Types**: ${[...new Set(edges.map((e: any) => e.type || 'unknown'))].join(', ')}` : ''}

## Key Insights

${insights.successFactors && insights.successFactors.length > 0 ? `### Success Factors
${insights.successFactors.map((factor: string) => `- ${factor}`).join('\n')}

` : ''}${insights.failureFactors && insights.failureFactors.length > 0 ? `### Failure Factors
${insights.failureFactors.map((factor: string) => `- ${factor}`).join('\n')}

` : ''}${insights.keyPatterns && insights.keyPatterns.length > 0 ? `### Key Patterns
${insights.keyPatterns.map((pattern: string) => `- ${pattern}`).join('\n')}

` : ''}${insights.recommendations && insights.recommendations.length > 0 ? `### Recommendations
${insights.recommendations.map((rec: string) => `- ${rec}`).join('\n')}

` : ''}${insights.psychologicalInsights && insights.psychologicalInsights.length > 0 ? `### Psychological Insights
${insights.psychologicalInsights.map((insight: string) => `- ${insight}`).join('\n')}

` : ''}${insights.coachingOpportunities && insights.coachingOpportunities.length > 0 ? `### Coaching Opportunities
${insights.coachingOpportunities.map((opp: string) => `- ${opp}`).join('\n')}

` : ''}---
Generated by Llama Knowledge Graph Generator
`;
  }

  static async saveSummaryReport(knowledgeGraph: any, outputPath: string): Promise<void> {
    const report = this.generateSummaryReport(knowledgeGraph);
    const reportPath = outputPath.replace('.json', '_summary.md');
    
    try {
      await fs.promises.writeFile(reportPath, report, 'utf8');
      console.log(`Summary report saved to: ${reportPath}`);
    } catch (error) {
      console.error('Error saving summary report:', error);
      throw error;
    }
  }

  static async saveRawOutput(fileName: string, content: string): Promise<void> {
    try {
      const rawOutputDir = path.join('output', 'raw_outputs');
      await this.ensureDirectoryExists(rawOutputDir);

      const filePath = path.join(rawOutputDir, fileName);
      await fs.promises.writeFile(filePath, content, 'utf8');
      console.log(`üíæ Raw output saved to: ${filePath}`);
    } catch (error) {
      console.error('‚ùå Failed to save raw output:', error);
      throw error;
    }
  }
}
