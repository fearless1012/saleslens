import * as fs from 'fs';
import * as path from 'path';
import { KnowledgeGraph } from './types';

export class FileService {
  static async ensureDirectoryExists(dirPath: string): Promise<void> {
    try {
      await fs.promises.mkdir(dirPath, { recursive: true });
    } catch (error) {
      console.error(`Error creating directory ${dirPath}:`, error);
      throw error;
    }
  }

  static async saveKnowledgeGraph(knowledgeGraph: KnowledgeGraph, outputPath: string): Promise<void> {
    try {
      const dir = path.dirname(outputPath);
      await this.ensureDirectoryExists(dir);
      
      const jsonString = JSON.stringify(knowledgeGraph, null, 2);
      await fs.promises.writeFile(outputPath, jsonString, 'utf8');
      
      console.log(`Knowledge graph saved to: ${outputPath}`);
      console.log(`File size: ${(jsonString.length / 1024).toFixed(2)} KB`);
    } catch (error) {
      console.error('Error saving knowledge graph:', error);
      throw error;
    }
  }

  static async saveKnowledgeGraphWithTimestamp(knowledgeGraph: KnowledgeGraph, baseDir: string = 'output'): Promise<string> {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const product = knowledgeGraph.metadata.product.replace(/[^a-zA-Z0-9]/g, '_');
    const filename = `knowledge_graph_${product}_${timestamp}.json`;
    const outputPath = path.join(baseDir, filename);
    
    await this.saveKnowledgeGraph(knowledgeGraph, outputPath);
    return outputPath;
  }

  static async loadTranscriptFile(filePath: string): Promise<string> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      return content;
    } catch (error) {
      console.error(`Error loading transcript file ${filePath}:`, error);
      throw error;
    }
  }

  static generateSummaryReport(knowledgeGraph: KnowledgeGraph): string {
    const { metadata, nodes, edges, insights } = knowledgeGraph;
    
    return `
# Knowledge Graph Analysis Report

## Product: ${metadata.product}
- **Generated**: ${new Date(metadata.generatedAt).toLocaleString()}
- **Total Transcripts**: ${metadata.totalTranscripts}
- **Successful**: ${metadata.successfulCount} (${((metadata.successfulCount / metadata.totalTranscripts) * 100).toFixed(1)}%)
- **Unsuccessful**: ${metadata.unsuccessfulCount} (${((metadata.unsuccessfulCount / metadata.totalTranscripts) * 100).toFixed(1)}%)

## Graph Structure
- **Nodes**: ${nodes.length}
- **Edges**: ${edges.length}
- **Node Types**: ${[...new Set(nodes.map(n => n.type))].join(', ')}
- **Edge Types**: ${[...new Set(edges.map(e => e.type))].join(', ')}

## Key Insights

### Success Factors
${insights.successFactors.map(factor => `- ${factor}`).join('\n')}

### Failure Factors
${insights.failureFactors.map(factor => `- ${factor}`).join('\n')}

### Key Patterns
${insights.keyPatterns.map(pattern => `- ${pattern}`).join('\n')}

### Recommendations
${insights.recommendations.map(rec => `- ${rec}`).join('\n')}

---
Generated by Llama Knowledge Graph Generator
`;
  }

  static async saveSummaryReport(knowledgeGraph: KnowledgeGraph, outputPath: string): Promise<void> {
    const report = this.generateSummaryReport(knowledgeGraph);
    const reportPath = outputPath.replace('.json', '_summary.md');
    
    try {
      await fs.promises.writeFile(reportPath, report, 'utf8');
      console.log(`Summary report saved to: ${reportPath}`);
    } catch (error) {
      console.error('Error saving summary report:', error);
      throw error;
    }
  }
}
